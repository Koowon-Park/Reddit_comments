# LLM Integration

```{r}
library(reticulate)
library(here)

venv_path <- here("venv")
if (!dir.exists(venv_path)) {
  virtualenv_create(venv_path)
  virtualenv_install(venv_path, packages = c("pandas", "transformers", "neo4j", "openai"))
}

virtualenv_install(venv_path, packages = c("openai"))
use_virtualenv(venv_path, required = TRUE)


#use_python("C:\Users\troen\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Python 3.10")
py_config()
```

# NEO4J problem
##drop col description

```{python}
import csv
import pandas as pd

file_path = "../../data/reddit_comments_15k_v2.csv"

# Step 1: Load the data into pandas
df = pd.read_csv(file_path)

#drop column 'body'
df = df.drop(columns=['description'])

#save
df.to_csv("../../data/reddit_comments_15k_v3.csv", index=False)
```


## NEO4J

```{python, eval = FALSE}
#install neo4j
from neo4j import GraphDatabase
uri = "bolt://localhost:7687"

#connect to the database
driver = GraphDatabase.driver(uri, auth=("neo4j", "11111111"))

def fetch_data(query):
    with driver.session() as session:
        result = session.run(query)
        return [record for record in result]

# Query example
query = """
MATCH (s:Sentiment)<-[:HAS_SENTIMENT]-(c:Comment)
RETURN s.type AS sentiment_type, c.id AS comment_id, c.score AS score, c.sentiment_category AS sentiment_category
LIMIT 10
"""
data = fetch_data(query)

# Extract data in a usable format
comments = [
    {
        "comment_id": record["comment_id"],
        "score": record["score"],
        "sentiment_type": record["sentiment_type"],
        "sentiment_category": record["sentiment_category"],
    }
    for record in data
]

# Display formatted results
for comment in comments:
    print(comment)
```
# LLM Integration

```{python}
from openai import OpenAI

neo4j_output = "Sample data from Neo4j"

client= OpenAI(api_key="ENTER API KEY")

completion = client.chat.completions.create(
    model="gpt-4o-mini",
    messages=[
        {"role": "system", "content": "You are a helpful assistant."},
        {
            "role": "user",
            "content": f"Based on the following data, analyze the sentiment and provide insights: {neo4j_output}"
        }
    ]
)

print(completion.choices[0].message)
<<<<<<< HEAD

```





=======
```
>>>>>>> a502214e9e58b6a9bc915d641aac4213e0da197c
